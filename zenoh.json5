{
  plugins: {
    // Configuration of "storage_manager" plugin:
    storage_manager: {
      volumes: {
        s3: {

            // Endpoint where the AWS S3 server is located (https://docs.aws.amazon.com/general/latest/gr/s3.html)
            // This parameter is optional, if not specified then the AWS endpoint resolver will 
            // provide an endpoint based on the region specified.
            //
            // This parameter can also be a custom endpoint in case you want to use a MinIO 
            // instance instead of the Amazon S3 service.
            url: "https://s3.eu-west-1.amazonaws.com",

            // AWS region to which connect. In order to connect to an AWS S3 server, if this field 
            // is specified then the url is not required, as it will be inferred from the region.
            region: "eu-west-1",

            private: {
                // Credentials for interacting with the S3 volume. They may differ from the storage credentials.
                access_key: "AKIAIOSFODNN7EXAMPLE",
                secret_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            }
        }
      },
      storages: {
        // Configuration of a "demo" storage using the S3 volume. Each storage is associated to a
        // single S3 bucket.
        s3_storage: {

          // The key expression this storage will subscribes to
          key_expr: "s3/example/*",

          // this prefix will be stripped from the received key when converting to database key.
          // i.e.: "demo/example/a/b" will be stored as "a/b"
          strip_prefix: "s3/example",

          volume: {
            // Id of the volume this storage is associated to
            id: "s3",

            // Bucket to which this storage is associated to
            bucket: "zenoh-bucket",

            // The storage attempts to create the bucket, but if the bucket already exists and is
            // owned by you, then with 'reuse_bucket' you can associate that preexisting bucket to
            // the storage, otherwise it will fail.
            reuse_bucket: true,

            // If the storage is read only, it will only handle GET requests
            read_only: false,

            // strategy on storage closure, either `destroy_bucket` or `do_nothing`
            // adminspace.permissions.write needs to be set to true to destroy the bucket on closure
            on_closure: "destroy_bucket",

            private: {
                // Credentials for interacting with the S3 bucket
                access_key: "AKIAIOSFODNN7EXAMPLE",
                secret_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            }
          }
        },
      }
    },
    // Optionally, add the REST plugin
    rest: { http_port: 8000 }
  },
  adminspace: {
    // read and/or write permissions on the admin space
    permissions: {
      read: true,
      write: true,
    },
  },
}
